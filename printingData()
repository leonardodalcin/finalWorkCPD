#imports
import json
import random
import os
import string
from trie import *
#funcoes: insert_key(k, v, trie), has_key(k, trie),
#retrieve_val(k, trie) e start_with_prefix(prefix, trie) 
from pprint import pprint

#main
def main():
	endFlag = 0
	print( "Start" )
	
#tests if db exists
	try: 
		with open( 'magicCards.bin', 'rb' ) as bindata:
			bin = bindata.read();
		print( "Binary successfully loaded" )
		createDb()
		
	except:
		print( " binary not found" )            
		createDb()
	
	print( 'Welcome to the great Magic the Gathering DB' )
	
	while endFlag == 0:
		endFlag = printMenu()
		if endFlag == 0:
			print('press any key')
			c = input() #espera input pra mostrar o menu de novo

#prints the menu and asks for a command
def printMenu():
	print( 'What are you looking for?' )
	print( '[0]Example \n[1]Search by name \n[2]Search by id \n[3]Quit' )
	print( '>', end = "" )
	c = int(input());
	
#prints example ------- Working
	if c == 0:
		card = cardExample();
		printingData ( card )
		return 0
		
#search by name ------- Needs implementation
	elif c == 1:
		print( 'And what is the name of the card?' )
		name = input();
		name = normalizeText(name)
		if has_key(name,trie) == True: #ve se a carta ta no database
			card = searchName( name ); 
			printingData( card )
		else:
			print('Card not in the database')
		return 0
		
#search by id
	elif c == 2:
		print( 'Please, insert card id' )
		ID = int(input())
		card = db[ID]
		pprint(card)
		return 0
		
#ends process --------- Working
	elif c == 3:
		return 1 
	else:
		print( 'Please insert useful information' )
	
#creates db
def createDb():
	global db
	db = []
	
	
	with open( 'AllCards.json' ) as data:
		jsondb = json.load( data );
		
	if jsondb:
		print( 'JSON database successfully loaded' )

#appends cards to db and creates its id
	i = 0
	for name,card in jsondb.items():
	       db.append(jsondb[name])
	       db[i]['id'] = i
	       i +=1

#creates a TRIE tree with the card names
	global trie
	trie = [[]]
	for i in range(0,len(db)):
		cardName = normalizeText(db[i]['name'])
		insert_key(cardName,i,trie)
	if trie:
		print('Trie successfully created')
		
	
#searchs for a card by name and returns it
def searchName(name):
	cardIndex = retrieve_val(name, trie)
	return db[cardIndex]

#searchs for a card by name and returns it
def searchNameLinear(name):  
	for i in range(0,len(db)):
		if(normalizeText(db[i]['name']) == name()):
			return( db[ i ] );
	return('Not found')
	
#prints an example with random index
def cardExample():
	aCardIndex = random.randint(0,len(db))
	return db[aCardIndex]

#normaliza a string
def normalizeText(textoInicial):
	texto = textoInicial.strip()
	for pc in string.punctuation:
		texto = texto.replace(pc, '') #tira a pontua√ßao do texto
	texto = texto.lower() #passa pra lowercase
	return texto

#prints all atributes of (card)
def printingData(card):
		if ('name' in card) == True: 
			print('Name: {}'.format(card['name']) )
		if ('id' in card) == True: 
			print('ID: {}'.format(card['id']) )
		if ('layout' in card) == True: 	
			print('Layout: {}'.format(card['layout']) )
		if ('power' in card) == True: 	
			print('Power: {}'.format(card['power']) )
		if ('subtypes' in card) == True: 	
			print('Subtypes: {}'.format(card['subtypes']) )
		if ('type' in card) == True: 	
			print('Type: {}'.format(card['type']) )
		if ('types' in card) == True: 
			print('Types: {}'.format(card['types']) )
		if ('colors' in card) == True: 	
			print('Colors: {}'.format(card['colors']) )
		if ('manaCost' in card) == True: 	
			print('Mana Cost: {}'.format(card['manaCost']) )
		if ('toughness' in card) == True: 	
			print('Toughness: {}'.format(card['toughness']) )
		if ('cmc' in card) == True: 	
			print('CMC: {}'.format(card['cmc']) )
		if ('text' in card) == True: 	
			print('Text: {}'.format(card['text']) )	

#initFunctions
main();
